facet_wrap(~ Risk.fac)
?survConcordance
citation("survival")
preval.dat
survConcordance(Surv(DSS.time, DSS) ~ lps, data = preval.dat)
survConcordance(Surv(DSS.time, DSS) ~ lps, data = preval.dat)$concordance
evalall[2]
evalall
ggplot(subset(preval.dat2.trtplot, Post.Surgical.Treatment != "Combined") ,
aes(time = DSS.time, status = DSS, linetype = Post.Surgical.Treatment)) + geom_km() +
theme_bw(base_size = 13, base_family = "serif") +
scale_linetype_discrete("Treatment") +
ylab("Disease Specific Survival") + ylim(0, 1) + xlab("Time in years since randomization") +
facet_wrap(~ Risk.fac)
cldat.trtplot$Risk.fac <- factor(cldat.trtplot$riskgrp, levels = c(FALSE, TRUE), labels = c("Low risk", "High risk"))
ggplot(subset(cldat.trtplot, Post.Surgical.Treatment != "Combined") ,
aes(time = DSS.time, status = DSS, linetype = Post.Surgical.Treatment)) + geom_km() +
theme_bw(base_size = 13, base_family = "serif") +
scale_linetype_discrete("Treatment") +
ylab("Disease Specific Survival") + ylim(0, 1) + xlab("Time in years since randomization") +
facet_wrap(~ Risk.fac)
?kable
ID <- sample(1:10, 100, replace = TRUE)
ID
boots <- sample(unique(ID), 50, replace = TRUE)
boots
sort(boots)
sapply(boots, function(x) which(ID %in% x))
unlist(lapply(boots, function(x) which(ID %in% x)))
boots <- sample(unique(ID), 10, replace = TRUE)
unlist(lapply(boots, function(x) which(ID %in% x)))
ID[boots]
boots
unlist(lapply(boots, function(x) which(ID == x)))
?identitcal
?identical
unlist(lapply(boots, function(x) which(identical(ID, x))))
unlist(lapply(boots, function(x) which(all.equal(ID, x))))
unlist(lapply(boots, function(x) which(ID == x)))
dex <- unlist(lapply(boots, function(x) which(ID == x)))
ID[dex]
boots
library(dplyr)
library(ggplot2)
library(knitr)
library(survival)
library(ggkm)
library(tidyr)
opts_chunk$set(echo = FALSE, message = FALSE, error = FALSE, warning = FALSE)
knit_hooks$set(plot = function(x, options) {
if ('tikz' %in% options$dev && !options$external) {
hook_plot_tex(x, options)
} else hook_plot_md(x, options)
})
load("../Code/cvsim-result.RData")
cvres <- do.call("rbind", cvsims)
cvlong <- do.call("rbind", lapply(1:ncol(cvres), function(i){
cl <- cvres[, i]
splow <- strsplit(colnames(cvres)[i], ".", fixed = TRUE)
nm <- paste(unlist(sapply(splow, function(s) rev(rev(s)[-1]))), collapse = ".")
cls <- sapply(splow, function(s) rev(s)[1])
data.frame(value = cvres[, i], stat = cls, scen = nm, stringsAsFactors = FALSE)
}))
ggplot(subset(cvlong, stat == "AUC"), aes(y = value, x = scen)) + geom_violin(fill = "grey60") +
theme_bw(base_size = 13, base_family = "serif") + coord_flip() +
scale_x_discrete("Estimation Approach", labels = c("Bootstrap", "Leave 10 out CV", "Leave 100 out CV", "Pre-validation",
"30% Holdout", "50% Holdout", "Resubstitution",
"Partial CV", "Partial Holdout", "Partial Resubstitution")) +
ylab("Area Under the ROC Curve")
ggplot(subset(cvlong, stat == "OR"), aes(y = value, x = scen)) + geom_violin(fill = "grey60") +
theme_bw(base_size = 13, base_family = "serif") + coord_flip() +
scale_x_discrete("Estimation Approach", labels = c("Bootstrap", "Leave 2% out CV", "Leave 10% out CV", "Pre-validation",
"30% Holdout", "50% Holdout", "Resubstitution",
"Partial CV (2%)", "Partial Holdout", "Partial Resubstitution")) +
ylab("Odds Ratio")
labs <- c(boot = "Bootstrap", cv.10 = "Leave 2% out CV", cv.100 = "Leave 10% out CV",
cv.preval = "Pre-validation",
holdout.3 = "30% Holdout", holdout.5 = "50% Holdout", naive = "Resubstitution",
zhu.cv = "Partial CV (2%)", zhu.hold = "Partial Holdout", zhu.hold2 = "Partial Resubstitution")
cvlong$Approach <- labs[cvlong$scen]
cvlong$Truth <- ifelse(cvlong$stat == "AUC", .5, 1.0)
cvlong$value[!is.finite(cvlong$value)] <- NA
cvlong %>% group_by(stat, Approach) %>%
summarize(`mean` = mean(value, na.rm =TRUE), `std.dev` = sd(value, na.rm = TRUE),
`Percent bias` = 100 * (mean(value - Truth[1], na.rm = TRUE))/Truth[1]) %>%
kable(digits = 2, caption = "Comparison of different approaches to estimating the Area Under the ROC Curve (AUC) and the odds ratio (OR) in the setting where a dataset is used to both define and evaluate the signature. The true value of the AUC is 0.5 and the true value of the OR is 1.0. Estimates are based on 1000 replicates of the numerical experiment. CV = Cross validation. ")
cvlong$value[cvlong$stat == "OR"] <- exp(cvlong$value[cvlong$stat == "OR"])
ggplot(subset(cvlong, stat == "AUC"), aes(y = value, x = scen)) + geom_violin(fill = "grey60") +
theme_bw(base_size = 13, base_family = "serif") + coord_flip() +
scale_x_discrete("Estimation Approach", labels = c("Bootstrap", "Leave 10 out CV", "Leave 100 out CV", "Pre-validation",
"30% Holdout", "50% Holdout", "Resubstitution",
"Partial CV", "Partial Holdout", "Partial Resubstitution")) +
ylab("Area Under the ROC Curve")
ggplot(subset(cvlong, stat == "OR"), aes(y = value, x = scen)) + geom_violin(fill = "grey60") +
theme_bw(base_size = 13, base_family = "serif") + coord_flip() +
scale_x_discrete("Estimation Approach", labels = c("Bootstrap", "Leave 2% out CV", "Leave 10% out CV", "Pre-validation",
"30% Holdout", "50% Holdout", "Resubstitution",
"Partial CV (2%)", "Partial Holdout", "Partial Resubstitution")) +
ylab("Log Odds Ratio")
ggplot(subset(cvlong, stat == "OR"), aes(y = value, x = scen)) + geom_violin(fill = "grey60") +
theme_bw(base_size = 13, base_family = "serif") + coord_flip() +
scale_x_discrete("Estimation Approach", labels = c("Bootstrap", "Leave 2% out CV", "Leave 10% out CV", "Pre-validation",
"30% Holdout", "50% Holdout", "Resubstitution",
"Partial CV (2%)", "Partial Holdout", "Partial Resubstitution")) + scale_y_log10() +
ylab("Odds Ratio (log scale)")
ggplot(subset(cvlong, stat == "OR"), aes(y = value, x = scen)) + geom_violin(fill = "grey60") +
theme_bw(base_size = 13, base_family = "serif") + coord_flip() +
scale_x_discrete("Estimation Approach", labels = c("Bootstrap", "Leave 2% out CV", "Leave 10% out CV", "Pre-validation",
"30% Holdout", "50% Holdout", "Resubstitution",
"Partial CV (2%)", "Partial Holdout", "Partial Resubstitution")) + scale_y_log10(breaks = c(.1, 1, 2)) +
ylab("Odds Ratio (log scale)")
ggplot(subset(cvlong, stat == "OR"), aes(y = value, x = scen)) + geom_violin(fill = "grey60") +
theme_bw(base_size = 13, base_family = "serif") + coord_flip() +
scale_x_discrete("Estimation Approach", labels = c("Bootstrap", "Leave 2% out CV", "Leave 10% out CV", "Pre-validation",
"30% Holdout", "50% Holdout", "Resubstitution",
"Partial CV (2%)", "Partial Holdout", "Partial Resubstitution")) + scale_y_log10(breaks = c(.5, 1, 2)) +
ylab("Odds Ratio (log scale)")
ggplot(subset(cvlong, stat == "OR"), aes(y = value, x = scen)) + geom_violin(fill = "grey60") +
theme_bw(base_size = 13, base_family = "serif") + coord_flip() +
scale_x_discrete("Estimation Approach", labels = c("Bootstrap", "Leave 2% out CV", "Leave 10% out CV", "Pre-validation",
"30% Holdout", "50% Holdout", "Resubstitution",
"Partial CV (2%)", "Partial Holdout", "Partial Resubstitution")) + scale_y_log10(breaks = c(.5, 1, 2, 4)) +
ylab("Odds Ratio (log scale)")
labs <- c(boot = "Bootstrap", cv.10 = "Leave 2% out CV", cv.100 = "Leave 10% out CV",
cv.preval = "Pre-validation",
holdout.3 = "30% Holdout", holdout.5 = "50% Holdout", naive = "Resubstitution",
zhu.cv = "Partial CV (2%)", zhu.hold = "Partial Holdout", zhu.hold2 = "Partial Resubstitution")
cvlong$Approach <- labs[cvlong$scen]
cvlong$Truth <- ifelse(cvlong$stat == "AUC", .5, 1.0)
cvlong$value[!is.finite(cvlong$value)] <- NA
cvlong %>% group_by(stat, Approach) %>%
summarize(`mean` = mean(value, na.rm =TRUE), `std.dev` = sd(value, na.rm = TRUE),
`Percent bias` = 100 * (mean(value - Truth[1], na.rm = TRUE))/Truth[1]) %>%
kable(digits = 2, caption = "Comparison of different approaches to estimating the Area Under the ROC Curve (AUC) and the odds ratio (OR) in the setting where a dataset is used to both define and evaluate the signature. The true value of the AUC is 0.5 and the true value of the OR is 1.0. Estimates are based on 1000 replicates of the numerical experiment. CV = Cross validation. ")
cvlong %>% filter(stat == "AUC") %>% group_by(Approach) %>%
summarize(`mean` = mean(value, na.rm =TRUE), `std.dev` = sd(value, na.rm = TRUE),
`Percent bias` = 100 * (mean(value - Truth[1], na.rm = TRUE))/Truth[1])
cvlong %>% filter(stat == "AUC") %>% group_by(Approach) %>%
summarize(`stat` = "AUC", `mean` = mean(value, na.rm =TRUE), `std.dev` = sd(value, na.rm = TRUE),
`Percent bias` = 100 * (mean(value - Truth[1], na.rm = TRUE))/Truth[1])
cvlong %>% filter(stat == "OR") %>% group_by(Approach) %>%
summarize(`stat` = "OR", `mean` = exp(mean(log(value), na.rm =TRUE)),
`std.dev` = exp(sd(log(value), na.rm = TRUE)),
`Percent bias` = 100 * (exp(mean(log(value) - log(Truth[1]), na.rm = TRUE)))/exp(Truth[1]))
cvlong %>% group_by(stat, Approach) %>%
summarize(`mean` = mean(value, na.rm =TRUE), `std.dev` = sd(value, na.rm = TRUE),
`Bias` = mean(value - Truth[1], na.rm = TRUE))
cvlong %>% group_by(stat, Approach) %>%
summarize(`mean` = mean(value, na.rm =TRUE), `std.dev` = sd(value, na.rm = TRUE),
`Bias` = mean(value - Truth[1], na.rm = TRUE)) %>%
kable(digits = 2, caption = "Comparison of different approaches to estimating the Area Under the ROC Curve (AUC) and the odds ratio (OR) in the setting where a dataset is used to both define and evaluate the signature. The true value of the AUC is 0.5 and the true value of the OR is 1.0. Estimates are based on 1000 replicates of the numerical experiment. CV = Cross validation. ")
cvlong$value[cvlong$stat == "OR"] <- log(cvlong$value[cvlong$stat == "OR"])
cvlong$Approach <- labs[cvlong$scen]
cvlong$Truth <- ifelse(cvlong$stat == "AUC", .5, 0.0)
cvlong$value[!is.finite(cvlong$value)] <- NA
cvlong %>% group_by(stat, Approach) %>%
summarize(`mean` = mean(value, na.rm =TRUE), `std.dev` = sd(value, na.rm = TRUE),
`Bias` = mean(value - Truth[1], na.rm = TRUE)) %>%
kable(digits = 2, caption = "Comparison of different approaches to estimating the Area Under the ROC Curve (AUC) and the odds ratio (OR) in the setting where a dataset is used to both define and evaluate the signature. The true value of the AUC is 0.5 and the true value of the OR is 1.0. Estimates are based on 1000 replicates of the numerical experiment. CV = Cross validation. ")
unique(cvlong$scen)
cvlong$scen <- factor(cvlong$scen, levels = c("naive", "zhu.cv", "zhu.hold", "zhu.hold2",
"cv.preval", "cv.10", "cv.100", "holdout.3",
"holdout.5", "boot"), ordered = TRUE)
load("../Code/cvsim-result.RData")
cvres <- do.call("rbind", cvsims)
cvlong <- do.call("rbind", lapply(1:ncol(cvres), function(i){
cl <- cvres[, i]
splow <- strsplit(colnames(cvres)[i], ".", fixed = TRUE)
nm <- paste(unlist(sapply(splow, function(s) rev(rev(s)[-1]))), collapse = ".")
cls <- sapply(splow, function(s) rev(s)[1])
data.frame(value = cvres[, i], stat = cls, scen = nm, stringsAsFactors = FALSE)
}))
cvlong$scen <- factor(cvlong$scen, levels = c("naive", "zhu.cv", "zhu.hold", "zhu.hold2",
"cv.preval", "cv.10", "cv.100", "holdout.3",
"holdout.5", "boot"), ordered = TRUE)
cvlong$value[cvlong$stat == "OR"] <- exp(cvlong$value[cvlong$stat == "OR"])
ggplot(subset(cvlong, stat == "AUC"), aes(y = value, x = scen)) + geom_violin(fill = "grey60") +
theme_bw(base_size = 13, base_family = "serif") + coord_flip() +
scale_x_discrete("Estimation Approach", labels = c("Bootstrap", "Leave 10 out CV", "Leave 100 out CV", "Pre-validation",
"30% Holdout", "50% Holdout", "Resubstitution",
"Partial CV", "Partial Holdout", "Partial Resubstitution")) +
ylab("Area Under the ROC Curve")
ggplot(subset(cvlong, stat == "AUC"), aes(y = value, x = scen)) + geom_violin(fill = "grey60") +
theme_bw(base_size = 13, base_family = "serif") + coord_flip() +
scale_x_discrete("Estimation Approach", labels = c("Resubstitution", "Partial CV",
"Partial Holdout", "Partial Resubstitution",
"Pre-validation", "Leave 10 out CV",
"Leave 100 out CV",
"30% Holdout", "50% Holdout", "Bootstrap"
)) +
ylab("Area Under the ROC Curve")
load("../Code/cvsim-result.RData")
cvres <- do.call("rbind", cvsims)
cvlong <- do.call("rbind", lapply(1:ncol(cvres), function(i){
cl <- cvres[, i]
splow <- strsplit(colnames(cvres)[i], ".", fixed = TRUE)
nm <- paste(unlist(sapply(splow, function(s) rev(rev(s)[-1]))), collapse = ".")
cls <- sapply(splow, function(s) rev(s)[1])
data.frame(value = cvres[, i], stat = cls, scen = nm, stringsAsFactors = FALSE)
}))
cvlong$value[cvlong$stat == "OR"] <- exp(cvlong$value[cvlong$stat == "OR"])
cvlong$scen <- factor(cvlong$scen, levels = c("naive", "zhu.cv", "zhu.hold", "zhu.hold2",
"cv.preval", "cv.10", "cv.100", "holdout.3",
"holdout.5", "boot"), ordered = TRUE)
labs <- c("Resubstitution", "Partial CV",
"Partial Holdout", "Partial Resubstitution",
"Pre-validation", "Leave 10 out CV", "Leave 100 out CV",
"30% Holdout", "50% Holdout", "Bootstrap")
names(labs) <- levels(cvlong$scen)
ggplot(subset(cvlong, stat == "AUC"), aes(y = value, x = scen)) + geom_violin(fill = "grey60") +
theme_bw(base_size = 13, base_family = "serif") + coord_flip() +
scale_x_discrete("Estimation Approach", labels = labs) +
ylab("Area Under the ROC Curve")
ggplot(subset(cvlong, stat == "OR"), aes(y = value, x = scen)) + geom_violin(fill = "grey60") +
theme_bw(base_size = 13, base_family = "serif") + coord_flip() +
scale_x_discrete("Estimation Approach", labels = labs) + scale_y_log10(breaks = c(.5, 1, 2, 4)) +
ylab("Odds Ratio (log scale)")
cvlong$value[cvlong$stat == "OR"] <- log(cvlong$value[cvlong$stat == "OR"])
cvlong$Approach <- labs[cvlong$scen]
cvlong$Truth <- ifelse(cvlong$stat == "AUC", .5, 0.0)
cvlong$value[!is.finite(cvlong$value)] <- NA
cvlong %>% group_by(stat, Approach) %>%
summarize(`mean` = mean(value, na.rm =TRUE), `std.dev` = sd(value, na.rm = TRUE),
`Bias` = mean(value - Truth[1], na.rm = TRUE)) %>%
kable(digits = 2, caption = "Comparison of different approaches to estimating the Area Under the ROC Curve (AUC) and the log odds ratio (OR) in the setting where a dataset is used to both define and evaluate the signature. The true value of the AUC is 0.5 and the true value of the Log OR is 0.0. Estimates are based on 1000 replicates of the numerical experiment. CV = Cross validation. ")
cvlong$Approach <- factor(labs[cvlong$scen], levels = labs, ordered = TRUE)
cvlong$Truth <- ifelse(cvlong$stat == "AUC", .5, 0.0)
cvlong$value[!is.finite(cvlong$value)] <- NA
cvlong %>% group_by(stat, Approach) %>%
summarize(`mean` = mean(value, na.rm =TRUE), `std.dev` = sd(value, na.rm = TRUE),
`Bias` = mean(value - Truth[1], na.rm = TRUE)) %>%
kable(digits = 2, caption = "Comparison of different approaches to estimating the Area Under the ROC Curve (AUC) and the log odds ratio (OR) in the setting where a dataset is used to both define and evaluate the signature. The true value of the AUC is 0.5 and the true value of the Log OR is 0.0. Estimates are based on 1000 replicates of the numerical experiment. CV = Cross validation. ")
devtools::install_github("sachsmc/ggkm")
?binom.test
binom.test(1, 33, p = .02)
binom.test(4, 65, p = .02)
binom.test(4, 88, p = .02)
binom.test(6, 88, p = .02)
binom.test(3, 33, p = .02)
binom.test(6, 88, p = .02)
binom.test(5, 88, p = .02)
binom.test(6, 88, p = .05)
binom.test(6, 88, p = .02, alternative = "greater")
binom.test(5, 88, p = .02, alternative = "greater")
binom.test(3, 33, p = .02, alternative = "greater")
binom.test(2, 33, p = .02, alternative = "greater")
binom.test(3, 33, p = .02, alternative = "greater")
binom.test(5, 88, p = .02, alternative = "greater")
binom.test(4, 88, p = .02, alternative = "greater")
binom.test(6, 88, p = .02, alternative = "greater")
expire <- function(r1 = 3, r2 = 5, p1 = .02){
N1 <- rbinom(1, 33, p = p1)
if(N1 >= r1) {
return(1)
} else {
N2 <- rbinom(1, 55, p = p1)
if(N2 + N1 >= r2) {
return(1)
} else {
return(0)
}
}
}
null <- replicate(expire(), 1000)
alt <- replicate(expire(p1 = .1), 1000)
mean(null)
null
expire()
null <- replicate(expire, 1000)
?replicate
null <- replicate(1000, expire())
alt <- replicate(1000, expire(p1 = .1))
null
mean(null)
mean(alt)
null <- replicate(50000, expire())
mean(null)
alt <- replicate(50000, expire(p1 = .1))
mean(alt)
alt <- replicate(50000, expire(p1 = .05))
expire <- function(r1 = 3, r2 = 5, p1 = .02){
N1 <- rbinom(1, 33, p = p1)
if(N1 >= r1) {
return(1) # 1 = stop
} else {
N2 <- rbinom(1, 55, p = p1)
if(N2 + N1 >= r2) {
return(1)
} else {
return(0)
}
}
}
null <- replicate(50000, expire())
mean(null)
alt <- replicate(50000, expire(p1 = .05))
mean(alt)
alt <- replicate(50000, expire(p1 = .08))
mean(alt)
alt <- replicate(50000, expire(p1 = .1))
mean(alt)
update.packages()
install.packages("pseval")
?power.t.test
.25 * 350^(-.2)
install.packages("pseval")
library(pseval)
test <- generate_example_data(2000)
simple <- test[, c(1, 2, 5, 8)]
tte <- test[, c(1, 2, 3, 5, 6, 7)]
cat <- test[, c(1, 8, 9, 10)]
library(survival)
hist(tte$time.obs)
table(tte$time.obs, tte$event.obs)
table(tte$time.obs, tte$event.obs)[1:4,]
p2 <- psdesign(tte, Z = Z, Y = Surv(time.obs, event.obs),
S = S.obs, BIP = BIP, CPV = CPV, tau = 0.1)
p2 <- psdesign(tte, Z = Z, Y = Surv(time.obs, event.obs),
S = S.obs, BIP = BIP, CPV = CPV, tau = 0.001)
p3 <- psdesign(cat, Z = Z, Y = Y.obs, S = S.obs.cat, BIP = BIP.cat)
p1 <- p1 + risk_binary(model = Y ~ S.1 * X, D = 100)
p1 <- psdesign(simple, Z = Z, Y = Y.obs, S = S.obs, BIP = BIP)
p2 <- psdesign(tte, Z = Z, Y = Surv(time.obs, event.obs),
S = S.obs, BIP = BIP, CPV = CPV, tau = 0.001)
p3 <- psdesign(cat, Z = Z, Y = Y.obs, S = S.obs.cat, BIP = BIP.cat)
## risk models
p1 <- p1 + risk_binary(model = Y ~ S.1 * X, D = 100)
p1 <- p1 + risk_binary(model = Y ~ S.1 * Z, D = 100)
p1
p1 <- p1 + integrate_semiparametric(formula.location = S.1 ~ BIP, formula.scale = S.1 ~ BIP)
p1
p2 <- p2 + integrate_parametric(formula = S.1 ~ bs(BIP, df = 3))
library(survival)
library(splines)
p2 <- p2 + integrate_parametric(formula = S.1 ~ bs(BIP, df = 3))
p2
hist(p1$augdata$S.1)
tte$S.obs <- exp(tte$S.obs)
test <- generate_example_data(2000)
simple <- test[, c(1, 2, 5, 8)]
tte <- test[, c(1, 2, 3, 5, 6, 7)]
tte$S.obs <- exp(tte$S.obs)
cat <- test[, c(1, 8, 9, 10)]
p1 <- psdesign(simple, Z = Z, Y = Y.obs, S = S.obs, BIP = BIP)
p2 <- psdesign(tte, Z = Z, Y = Surv(time.obs, event.obs),
S = S.obs, BIP = BIP, CPV = CPV, tau = 0.001)
p3 <- psdesign(cat, Z = Z, Y = Y.obs, S = S.obs.cat, BIP = BIP.cat)
## integration models
p1 <- p1 + integrate_semiparametric(formula.location = S.1 ~ BIP, formula.scale = S.1 ~ BIP)
p2 <- p2 + integrate_parametric(formula = S.1 ~ bs(BIP, df = 3))
hist(p2$augdata$S.1)
plot(S.1 ~ BIP, data = p2$augdata)
hist(p1$augdata$S.1)
plot(S.1 ~ BIP, data = p1$augdata)
p3 <- p3 + integrate_nonparametric(S.1 ~ BIP)
p3
plot(survfit(Y ~ 1, data = p2$augdata))
p2.x <- p2 + integrate_parametric(formula = log(S.1) ~ BIP)
p2.x <- p2 + integrate_parametric(formula = S.1 ~ exp(BIP))
p1 <- p1 + risk_binary(D = 200)
p1
?risk_binary
p1 <- p1 + risk_binary(Y ~ S.1 * Z, D = 200) + ps_estimate()
plot(p1)
p1 <- p1 + risk_binary(Y ~ S.1 * Z, D = 200, risk = risk.probit) + ps_estimate()
plot(p1)
p2 <- p2 + risk_weibull(D = 200) + ps_estimate()
plot(p2)
?bs
p2 <- p2 + integrate_parametric(formula = S.1 ~ BIP + I(BIP^2))
p2 <- p2 + risk_weibull(D = 200) + ps_estimate()
p2
plot(p2)
p2
p2 <- p2 + risk_exponential(D = 200) + ps_estimate()
plot(p2)
p2 <- p2 + risk_weibull(D = 200) + ps_estimate() + ps_bootstrap()
p3 <- p3 + risk_binary(D = 100) + ps_estimate()
plot(p3)
p3 <- p3 + risk_binary(D = 1000) + ps_estimate()
plot(p3)
plot(Y ~ S.1, data = p3$augdata)
plot(Y ~ jitter(S.1), data = p3$augdata)
plot(jitter(Y) ~ S.1, data = p3$augdata)
test2 <- generate_example_data(500)
cat <- test2[, c(1, 8, 9, 10)]
p3 <- psdesign(cat, Z = Z, Y = Y.obs, S = S.obs.cat, BIP = BIP.cat)
## integratio
p3 <- p3 + integrate_nonparametric(S.1 ~ BIP)
p3 <- p3 + risk_binary(D = 1000) + ps_estimate()
plot(p3)
hist(test2$S.obs)
cat$S.obs.cat <- cut(test2$S.obs, c(-Inf, -1, 1, Inf))
p3 <- psdesign(cat, Z = Z, Y = Y.obs, S = S.obs.cat, BIP = BIP.cat)
p3 <- p3 + integrate_nonparametric(S.1 ~ BIP)
p3 <- p3 + risk_binary(D = 1000) + ps_estimate()
plot(p3)
cat$S.obs.cat <- cut(test2$S.obs, c(-Inf, 0, Inf))
p3 <- psdesign(cat, Z = Z, Y = Y.obs, S = S.obs.cat, BIP = BIP.cat)
p3 <- p3 + integrate_nonparametric(S.1 ~ BIP)
p3 <- p3 + risk_binary(D = 1000) + ps_estimate(method = "pseudo-score")
plot(p3)
cat$S.obs.cat <- cut(test2$S.obs, c(-Inf,-1, 0, 1, Inf))
p3 <- psdesign(cat, Z = Z, Y = Y.obs, S = S.obs.cat, BIP = BIP.cat)
p3 <- p3 + integrate_nonparametric(S.1 ~ BIP)
p3 <- p3 + risk_binary(D = 1000) + ps_estimate(method = "pseudo-score")
plot(p3)
p3 <- p3 + risk_binary(D = 1000) + ps_estimate(method = "pseudo-score") + ps_bootstrap()
p1 <- p1 + risk_binary(Y ~ bs(S.1, df = 2, degree = 1) * Z, D = 200, risk = risk.probit) + ps_estimate()
p1
plot(p1)
p1 <- p1 + ps_bootstrap(n.boots = 50)
plot(p1)
install.packages("rio")
library(rio)
?export
set.seed(721)
test <- generate_example_data(2000)
test2 <- generate_example_data(500)
simple <- test[, c(1, 2, 5, 8)]
tte <- test[, c(1, 2, 3, 5, 6, 7)]
tte$S.obs <- exp(tte$S.obs)
cat <- test2[, c(1, 8, 9, 10)]
cat$S.obs.cat <- cut(test2$S.obs, c(-Inf,-1, 0, 1, Inf))
p1 <- psdesign(simple, Z = Z, Y = Y.obs, S = S.obs, BIP = BIP)
p2 <- psdesign(tte, Z = Z, Y = Surv(time.obs, event.obs),
S = S.obs, BIP = BIP, CPV = CPV, tau = 0.001)
p3 <- psdesign(cat, Z = Z, Y = Y.obs, S = S.obs.cat, BIP = BIP.cat)
## integration models
hist(p1$augdata$S.1)
plot(S.1 ~ BIP, data = p1$augdata)
hist(p2$augdata$S.1)
plot(S.1 ~ BIP, data = p2$augdata)
p1 <- p1 + integrate_semiparametric(formula.location = S.1 ~ BIP,
formula.scale = S.1 ~ 1)
p2 <- p2 + integrate_parametric(formula = S.1 ~ BIP + I(BIP^2))
p3 <- p3 + integrate_nonparametric(S.1 ~ BIP)
plot(survfit(Y ~ 1, data = p2$augdata))
p1 <- p1 + risk_binary(Y ~ S.1 * Z, D = 200) + ps_estimate()
plot(p1)
p2 <- p2 + risk_weibull(D = 50) + ps_estimate() + ps_bootstrap()
p2 <- p2 + risk_weibull(D = 50) + ps_estimate()
plot(p2)
plot(p2, time = 2)
plot(p2, t = 2)
warnings()
p2 <- p2 + risk_exponential(D = 50) + ps_estimate()
plot(p2)
tte$S.obs <- exp(tte$S.obs + rnorm(2000))
p2 <- psdesign(tte, Z = Z, Y = Surv(time.obs, event.obs),
S = S.obs, BIP = BIP, CPV = CPV, tau = 0.001)
p2 <- p2 + risk_weibull(D = 50) + ps_estimate()
p2 <- p2 + integrate_parametric(formula = S.1 ~ log(BIP))
tte$BIP <- exp(tte$BIP + rnorm(2000))
p1 <- psdesign(simple, Z = Z, Y = Y.obs, S = S.obs, BIP = BIP)
p2 <- psdesign(tte, Z = Z, Y = Surv(time.obs, event.obs),
S = S.obs, BIP = BIP, CPV = CPV, tau = 0.001)
p3 <- psdesign(cat, Z = Z, Y = Y.obs, S = S.obs.cat, BIP = BIP.cat)
## integration models
hist(p1$augdata$S.1)
plot(S.1 ~ BIP, data = p1$augdata)
hist(p2$augdata$S.1)
plot(S.1 ~ BIP, data = p2$augdata)
tte$BIP <- exp(.001 * tte$BIP + rnorm(2000))
p1 <- psdesign(simple, Z = Z, Y = Y.obs, S = S.obs, BIP = BIP)
p2 <- psdesign(tte, Z = Z, Y = Surv(time.obs, event.obs),
S = S.obs, BIP = BIP, CPV = CPV, tau = 0.001)
p3 <- psdesign(cat, Z = Z, Y = Y.obs, S = S.obs.cat, BIP = BIP.cat)
## integration models
hist(p1$augdata$S.1)
plot(S.1 ~ BIP, data = p1$augdata)
hist(p2$augdata$S.1)
plot(S.1 ~ BIP, data = p2$augdata)
test <- generate_example_data(2000)
test2 <- generate_example_data(500)
simple <- test[, c(1, 2, 5, 8)]
tte <- test[, c(1, 2, 3, 5, 6, 7)]
tte$BIP <- exp(.001 * tte$BIP + rnorm(2000))
cat <- test2[, c(1, 8, 9, 10)]
cat$S.obs.cat <- cut(test2$S.obs, c(-Inf,-1, 0, 1, Inf))
p1 <- psdesign(simple, Z = Z, Y = Y.obs, S = S.obs, BIP = BIP)
p2 <- psdesign(tte, Z = Z, Y = Surv(time.obs, event.obs),
S = S.obs, BIP = BIP, CPV = CPV, tau = 0.001)
p3 <- psdesign(cat, Z = Z, Y = Y.obs, S = S.obs.cat, BIP = BIP.cat)
## integration models
hist(p1$augdata$S.1)
plot(S.1 ~ BIP, data = p1$augdata)
hist(p2$augdata$S.1)
plot(S.1 ~ BIP, data = p2$augdata)
p1 <- p1 + integrate_semiparametric(formula.location = S.1 ~ BIP,
formula.scale = S.1 ~ 1)
p2 <- p2 + integrate_parametric(formula = S.1 ~ log(BIP))
p3 <- p3 + integrate_nonparametric(S.1 ~ BIP)
## risk models and estimation
plot(survfit(Y ~ 1, data = p2$augdata))
p2 <- p2 + risk_weibull(D = 50) + ps_estimate()
plot(p2)
p2 <- p2 + risk_exponential(D = 50) + ps_estimate()
plot(p2)
p2 <- p2 + risk_weibull(D = 50) + ps_estimate()
plot(p2, contrast = "RR")
?rweibull
p3 <- p3 + risk_binary(D = 500) + ps_estimate(method = "pseudo-score") + ps_bootstrap()
p3 <- p3 + risk_binary(D = 500) + ps_estimate(method = "pseudo-score") #+ ps_bootstrap()
plot(p3)
setwd("~/Desktop/slides for SISMID")
export(simple, "Data/data1.csv")
export(tte, "Data/ttedata.xlsx")
export(cat, "Data/nonparametric.dta")
tte2 <- import("Data/ttedata.xlsx")
tte2
p1
